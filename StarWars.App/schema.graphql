schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  characters(where: CharacterFilterInput order: [CharacterSortInput!]): [Character!]!
}

type Mutation {
  addCharacter(character: CharacterInput!): Character!
}

type Subscription {
  onCharacterAdded: Character!
}

input CharacterFilterInput {
  and: [CharacterFilterInput!]
  or: [CharacterFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  faction: StringOperationFilterInput
  species: StringOperationFilterInput
  homeworld: StringOperationFilterInput
}

input CharacterSortInput {
  id: SortEnumType
  name: SortEnumType
  faction: SortEnumType
  species: SortEnumType
  homeworld: SortEnumType
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

input CharacterInput {
  id: Int!
  name: String!
  faction: String!
  species: String!
  homeworld: String!
}

type Character {
  id: Int!
  name: String!
  faction: String!
  species: String!
  homeworld: String!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION